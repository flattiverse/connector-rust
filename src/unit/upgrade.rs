use crate::network::PacketReader;

#[derive(Debug)]
pub struct Upgrade {
    pub galaxy: i32,
    pub ship: u8,
    pub id: u8,
    /// The id of the previous [`Upgrade`]. Can be found on the orresponding ship of this [`Upgrade`].
    pub previous_upgrade: Option<u8>,
    pub name: String,
    pub cost_energy: f64,
    pub cost_ion: f64,
    pub cost_iron: f64,
    pub cost_tungsten: f64,
    pub cost_silicon: f64,
    pub cost_tritium: f64,
    pub cost_time: f64,
    pub hull: f64,
    pub hull_repair: f64,
    pub shields: f64,
    pub shields_repair: f64,
    pub size: f64,
    pub weight: f64,
    pub energy_max: f64,
    pub energy_cells: f64,
    pub energy_reactor: f64,
    pub energy_transfer: f64,
    pub ion_max: f64,
    pub ion_cells: f64,
    pub ion_reactor: f64,
    pub ion_transfer: f64,
    pub thruster: f64,
    pub nozzle: f64,
    pub speed: f64,
    pub turnrate: f64,
    pub cargo: f64,
    pub extractor: f64,
    pub weapon_speed: f64,
    pub weapon_time: f64,
    pub weapon_load: f64,
}

impl Upgrade {
    pub fn new(id: u8, galaxy: i32, ship: u8, reader: &mut dyn PacketReader) -> Self {
        Self {
            id,
            galaxy,
            ship,
            previous_upgrade: reader.read_nullable_byte(),
            name: reader.read_string(),
            cost_energy: reader.read_4s(2.0),
            cost_ion: reader.read_4s(2.0),
            cost_iron: reader.read_4s(2.0),
            cost_tungsten: reader.read_4s(2.0),
            cost_silicon: reader.read_4s(2.0),
            cost_tritium: reader.read_4s(2.0),
            cost_time: reader.read_4s(2.0),
            hull: reader.read_4s(2.0),
            hull_repair: reader.read_4s(2.0),
            shields: reader.read_4s(2.0),
            shields_repair: reader.read_4s(2.0),
            size: reader.read_4s(2.0),
            weight: reader.read_4s(2.0),
            energy_max: reader.read_4s(2.0),
            energy_cells: reader.read_4s(2.0),
            energy_reactor: reader.read_4s(2.0),
            energy_transfer: reader.read_4s(2.0),
            ion_max: reader.read_4s(2.0),
            ion_cells: reader.read_4s(2.0),
            ion_reactor: reader.read_4s(2.0),
            ion_transfer: reader.read_4s(2.0),
            thruster: reader.read_4s(2.0),
            nozzle: reader.read_4s(2.0),
            speed: reader.read_4s(2.0),
            turnrate: reader.read_4s(2.0),
            cargo: reader.read_4s(2.0),
            extractor: reader.read_4s(2.0),
            weapon_speed: reader.read_4s(2.0),
            weapon_time: reader.read_4s(2.0),
            weapon_load: reader.read_4s(2.0),
        }
    }
}
